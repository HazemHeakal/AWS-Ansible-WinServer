- hosts: localhost
  connection: local
  gather_facts: False

  vars:
    key_name: my_aws
    region: us-east-2
    image: ami-070c8f866f0b62d96 # https://cloud-images.ubuntu.com/locator/ec2/
    id: "web-app"
    sec_group: "{{ id }}-sec"
    admin_password: 'admin123' # Replace with your desired password

  tasks:

    - name: Facts
      block:

        - name: Get instances facts
          ec2_instance_facts:
            aws_access_key: "{{ec2_access_key}}"
            aws_secret_key: "{{ec2_secret_key}}"
            region: "{{ region }}"
          register: result

        - name: Instances ID
          debug:
            msg: "ID: {{ item.instance_id }} - State: {{ item.state.name }} - Public DNS: {{ item.public_dns_name }}"
          loop: "{{ result.instances }}"

      tags: always

    - name: Provisioning EC2 instances
      block:

        - name: Upload public key to AWS
          ec2_key:
            name: "{{ key_name }}"
            key_material: "{{ lookup('file', '/home/hazem-heakal/.ssh/{{ key_name }}.pub') }}"
            region: "{{ region }}"
            aws_access_key: "{{ec2_access_key}}"
            aws_secret_key: "{{ec2_secret_key}}"

        - name: Create security group
          ec2_group:
            name: "{{ sec_group }}"
            description: "Sec group for app {{ id }}"
            region: "{{ region }}"
            aws_access_key: "{{ec2_access_key}}"
            aws_secret_key: "{{ec2_secret_key}}"
            rules:
              - proto: tcp
                ports:
                  - 22
                  - 80
                  - 443
                  - 3389
                cidr_ip: 0.0.0.0/0
                rule_desc: allow all on ssh port
          register: result_sec_group

        - name: Provision instance(s)
          ec2:
            aws_access_key: "{{ec2_access_key}}"
            aws_secret_key: "{{ec2_secret_key}}"
            key_name: "{{ key_name }}"
            id: "{{ id }}"
            group_id: "{{ result_sec_group.group_id }}"
            image: "{{ image }}"
            instance_type: t2.micro
            region: "{{ region }}"
            wait: true
            count: 1
            user_data: |
              <powershell>
              $adminPassword = ConvertTo-SecureString '{{ admin_password }}' -AsPlainText -Force
              $adminUser = Get-LocalUser -Name Administrator
              $adminUser | Set-LocalUser -Password $adminPassword
              </powershell>

    - name: Wait for instance to be running
      ec2_instance_facts:
        region: "{{ region }}"
        filters:
            "tag:Name": "{{ id }}-sec"
            instance-state-name: running
      register: ec2_facts
      until: ec2_facts.instances[0].state.name == 'running'
      retries: 10
      delay: 60   
      tags: ['never', 'create_ec2']
    
    - name: Wait for WinRM to become ready
      local_action:
        module: wait_for
        host: "{{ ec2_facts.instances[0].public_ip }}"
        port: 5985
        delay: 10
        timeout: 300
      when: ec2_facts.instances[0].public_ip is defined

    - name: Install IIS via WinRM
      delegate_to: localhost
      win_shell: Install-WindowsFeature -name Web-Server -IncludeManagementTools
      vars:
        ansible_host: "{{ ec2_facts.instances[0].public_ip }}"
        ansible_connection: winrm
        ansible_winrm_server_cert_validation: ignore
        ansible_user: Administrator
        ansible_password: admin123 # Replace with your admin password
        ansible_winrm_transport: ntlm 
      when: ec2_facts.instances[0].public_ip is defined 

    - name: Install and Configure RDP
      block:
        - name: Install Remote Desktop Services Role
          win_feature:
            name: RDS-RD-Server
            state: present
          vars:
            ansible_host: "{{ ec2_facts.instances[0].public_ip }}"
            ansible_connection: winrm
            ansible_winrm_server_cert_validation: ignore
            ansible_user: Administrator
            ansible_password: admin123 # Replace with your admin password
            ansible_winrm_transport: ntlm # or 'credssp' or 'kerberos' if set up
          when: ec2_facts.instances[0].public_ip is defined

        - name: Enable RDP in Firewall
          win_shell: |
            Set-NetFirewallRule -Name 'RemoteDesktop-UserMode-In-TCP' -Enabled True
            Set-NetFirewallRule -Name 'RemoteDesktop-UserMode-In-UDP' -Enabled True
          vars:
            ansible_host: "{{ ec2_facts.instances[0].public_ip }}"
            ansible_connection: winrm
            ansible_winrm_server_cert_validation: ignore
            ansible_user: Administrator
            ansible_password: admin123
            ansible_winrm_transport: ntlm
          when: ec2_facts.instances[0].public_ip is defined

        - name: Enable Remote Desktop
          win_shell: |
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
          vars:
            ansible_host: "{{ ec2_facts.instances[0].public_ip }}"
            ansible_connection: winrm
            ansible_winrm_server_cert_validation: ignore
            ansible_user: Administrator
            ansible_password: admin123
            ansible_winrm_transport: ntlm
          when: ec2_facts.instances[0].public_ip is defined